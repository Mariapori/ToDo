@using Microsoft.EntityFrameworkCore
@using ToDo.Data
@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable
@inject AuthenticationStateProvider context
@inject IDbContextFactory<todosorsaContext> DbFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


@if(todoMembers == null)
{
    <label>ToDo listat</label>
<select @onchange="(asd) => Vaihda(asd)">
    <option value="0">Valitse ToDo lista</option>
    @foreach(var item in Todos.OrderBy(o => o.Kuvaus))
    {
        <option value="@item.Id">@item.Kuvaus</option>
    }
</select>
    @if(valittu != null)
    {
        <br />
        <label>Vain omat merkinnät </label><input type="checkbox" @onchange="(onko) => VainOmat(onko)"/>
    }
<br />
<hr />
}



@if(valittu != null){
    <h3>@valittu.Kuvaus</h3>
    <div class="row row-cols-3">
    <div class="col-xl bg-info" ondragover="event.preventDefault()" @ondrop="()=> Tiputa(Tila.ToDo)">
        <h3 style="text-align: center; padding: 5px;">TODO</h3>
        <ul title="TODO" class="list-unstyled">
            @foreach(var todo in valittu?.Tehtavat?.Where(o => o.Tila == Tila.ToDo))
            {
                <li class="bg-white bg-opacity-50 m-5 p-5 position-relative" draggable="true" @ondragstart="()=> Raahaa(todo)" @ondragend="() => Raahaa(todo)" >
                    <h2 style="position: absolute; top: 0px; right: 3px;" @onclick="() => Poista(todo)">X</h2>
                    <strong>@todo.Kuvaus</strong><br/>
                    <small>Päivitetty: @todo.Muokattu.ToString("dd.MM.yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture)</small>
                                            @if(todo.Muokkaaja != null)
                        {
                           <br /> <small>Viimeksi päivittänyt: @todo.Muokkaaja</small>
                        }
                       <br/> <small>Luonut: @todo.Luoja</small>
                    </li>
            }
        </ul>
    </div>
        <div class="col-xl bg-danger" ondragover="event.preventDefault()" @ondrop="()=> Tiputa(Tila.Aloitettu)">
                    <h3 style="text-align: center; padding: 5px;">Aloitettu</h3>
                    <ul title="Aloitettu" class="list-unstyled">
            @foreach(var todo in valittu?.Tehtavat?.Where(o => o.Tila == Tila.Aloitettu))
            {
                <li class="bg-white bg-opacity-50 m-5 p-5 position-relative" draggable="true" @ondragstart="()=> Raahaa(todo)" @ondragend="() => Raahaa(todo)">
                                        <h2 style="position: absolute; top: 0px; right: 3px;" @onclick="() => Poista(todo)">X</h2>
                    <strong>@todo.Kuvaus</strong><br/>
                    <small>Päivitetty: @todo.Muokattu.ToString("dd.MM.yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture)</small>
                        @if(todo.Muokkaaja != null)
                        {
                          <br />  <small>Viimeksi päivittänyt: @todo.Muokkaaja</small>
                        }
                        <br /><small>Luonut: @todo.Luoja</small>
                    </li>
            }
        </ul>
    </div>
        <div class="col-xl bg-success" ondragover="event.preventDefault()" @ondrop="()=> Tiputa(Tila.Valmis)">
                    <h3 style="text-align: center; padding: 5px;">Valmis</h3>
                    <ul title="Valmis" class="list-unstyled">
            @foreach(var todo in valittu?.Tehtavat?.Where(o => o.Tila == Tila.Valmis))
            {
                <li class="bg-white bg-opacity-50 m-5 p-5 position-relative" draggable="true" @ondragstart="()=> Raahaa(todo)" @ondragend="() => Raahaa(todo)">
                                        <h2 style="position: absolute; top: 0px; right: 3px;" @onclick="() => Poista(todo)">X</h2>
                    <strong>@todo.Kuvaus</strong><br/>
                    <small>Päivitetty: @todo.Muokattu.ToString("dd.MM.yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture)</small>
                                            @if(todo.Muokkaaja != null)
                        {
                          <br />  <small>Viimeksi päivittänyt: @todo.Muokkaaja</small>
                        }
                        <br /><small>Luonut: @todo.Luoja</small>
                    </li>
            }
        </ul>
    </div>
</div>

<h3>Lisää uusi tehtävä</h3>
<textarea class="form-control" rows="2" name="kuvaus" @bind=kuvaus required></textarea><br />
<button class="btn btn-dark" @onclick=LisaaTehtava>Lisää</button>
    }
@if(todoMembers == null && valittu == null)
{
    <button class="btn btn-dark" @onclick="() => todoMembers = new List<todoMember>()">Lisää uusi jaettu todo-lista</button>
}    
    @if(todoMembers != null)
    {
        <label>ToDo-listan nimi</label>
            <textarea class="form-control" rows="2" name="uusiKuvaus" @bind=uusiKuvaus required></textarea><br />
<h5>Henkilöt:</h5>
<table class="table table-striped">
    <thead>
        <tr>
            <th>
                <button class="btn btn-dark" @onclick="() => UusiHenkilo(new todoMember())">Uusi henkilö</button>
            </th>
        </tr>
        <tr>
            <th>Sähköposti</th>
        </tr>
    </thead>
    <tbody>

                @foreach(var item in todoMembers)
                    {
                     <tr>
                        <td><input type="text" @bind-value=item.Email></td>
                     </tr>
                    }
            

        </tbody>
</table>
<button class="btn btn-dark" @onclick=LisaaJaettuTodo>Lisää</button>

}



@code {
    private HubConnection? hubConnection;
    private string? kuvaus;
    private string? user;
    private todosorsaContext? db;
    private List<SharedTodo> Todos = new List<SharedTodo>();
    private todo? drag;
    private SharedTodo? valittu;
    private SharedTodo? uusi;
    private string? uusiKuvaus;
    private List<todoMember>? todoMembers;
    private todoMember? uusiHenkilo;
    private List<int>? memberOf;
    private List<todo>? alkuperaiset;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await context.GetAuthenticationStateAsync();
        user = authstate?.User?.Identity?.Name ?? null;
        db = await DbFactory.CreateDbContextAsync();
        memberOf = db.TodoMembers.Include(o => o.SharedTodo).Where(o => o.Email == user).Select(o => o.SharedTodo.Id).ToList();
        Todos = db.SharedTodos.Include(o => o.Tehtavat).Include(o => o.Jasenet).Where(o => o.Luoja == user || memberOf.Contains(o.Id)).ToList();

        hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/sharedtodohub"))
           .Build();

        hubConnection.On<todo, int>("UusiTodo", (todo, sharedtodoID) =>
        {
            if (memberOf.Contains(sharedtodoID) && valittu?.Id == sharedtodoID)
            {
                valittu?.Tehtavat.Add(todo);
                StateHasChanged();
            }
        });

         hubConnection.On<todo, int>("RemTodo", (todo, sharedtodoID) =>
        {
            if (memberOf.Contains(sharedtodoID) && valittu?.Id == sharedtodoID)
            {
                valittu?.Tehtavat.Remove(todo);
                StateHasChanged();
            }
        });

                 hubConnection.On<todo, int, Tila>("UpdateTodo", (todo, sharedtodoID, uusTila) =>
        {
            if (memberOf.Contains(sharedtodoID) && valittu?.Id == sharedtodoID)
            {
                var vanha = valittu?.Tehtavat.FirstOrDefault(o => o.Id == todo.Id);
                vanha = todo;
                StateHasChanged();
            }
        });




        await hubConnection.StartAsync();
    }
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override void OnAfterRender(bool firstRender)
    {
        Todos = db.SharedTodos.Include(o => o.Tehtavat).Include(o => o.Jasenet).Where(o => o.Luoja == user || memberOf.Contains(o.Id)).ToList();
    }

    public async void LisaaTehtava()
    {
        var todo = new todo();
        todo.Kuvaus = kuvaus;
        todo.Luotu = DateTime.Now;
        todo.Muokattu = DateTime.Now;
        todo.Luoja = user;
        todo.Tila = Tila.ToDo;
        todo.Personal = false;
        valittu.Tehtavat.Add(todo);
        db.SaveChanges();
        kuvaus = null;
        if(hubConnection != null)
        {
         await hubConnection.SendAsync("AddTodo", todo, valittu?.Id);
        }

    }

    public void LisaaJaettuTodo()
    {
        var sharedTodo = new SharedTodo();
        sharedTodo.Kuvaus = uusiKuvaus;
        sharedTodo.Luoja = user;
        sharedTodo.Luotu = DateTime.Now;
        sharedTodo.Tehtavat = new List<todo>();
        sharedTodo.Jasenet = todoMembers;
        db.SharedTodos.Add(sharedTodo);
        db.SaveChanges();
        uusiKuvaus = null;
        todoMembers = null;
        Todos.Add(sharedTodo);
        StateHasChanged();
    }

    public void Dispose()
    {
        db?.Dispose();
    }
    public void Raahaa(todo raahattu)
    {
        if(raahattu != null)
        {
            drag = raahattu;
        }
    }
    public async void Tiputa(Tila tila)
    {

        if(drag != null && tila != drag.Tila)
        {
            drag.Tila = tila;
            drag.Muokattu = DateTime.Now;
            drag.Muokkaaja = user;
            db.Todos.Update(drag);
            db.SaveChanges();
            drag = null;
            StateHasChanged();
            if(hubConnection != null)
            {
            await hubConnection.SendAsync("UpdateTodo", drag, valittu?.Id, drag?.Tila);
            }
        }
    }

    public async void Poista(todo poistettava)
    {
        if(poistettava != null)
        {
            valittu.Tehtavat.Remove(poistettava);
            db.SaveChanges();
            if(hubConnection != null)
            {
            await hubConnection.SendAsync("RemTodo", poistettava, valittu?.Id);
            }
        }

    }

    public void Vaihda(ChangeEventArgs args)
    {
        int id = int.Parse(args.Value.ToString());
        if(id > 0)
        {
            valittu = Todos.FirstOrDefault(o => o.Id == id);
        }
        else
        {
            valittu = null;
        }

    }
    public void UusiHenkilo(todoMember uus)
    {
        if(uus != null)
        {
            todoMembers.Add(uus);
        }
    }
    public void VainOmat(ChangeEventArgs args)
    {
        bool onko = Boolean.Parse(args.Value.ToString());
        if(onko)
        {
            alkuperaiset = valittu.Tehtavat;
            valittu.Tehtavat = valittu.Tehtavat.Where(o => o.Luoja == user).ToList();
        }
        else
        {
            valittu.Tehtavat = alkuperaiset;
        }

    }

}
